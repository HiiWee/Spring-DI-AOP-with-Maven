< ------------------------------------------------------------ 메이븐(Maven) 이란? ------------------------------------------------------------>
* 프로젝트를 빌드할때 사용되는 빌드 툴 중 하나
* 프로젝트 생성 -> 라이브러리 설정 -> 코드 작업 -> 컴파일 -> 테스트 -> 패키지 만들기 -> 배포 -> 레포팅 과 같은 빌드과정들을 효율적이고 쉽게 구현할 수 있게 해주는 빌드 툴
* 특정 IDE에 종속된것이 아니라 빌드를 도와주는 역할자인 도구이다.
* 기존 IDE에서 얹어서 추가적으로 설치할 수 있는 것들 : 빌드도구 (Maven, Gradle, Ant 등), 버전 관리를 위한 도구 (Git, CVS), 테스트를 위한 도구(JUnit)등이 있다.

* 이클립스가 제공하지 않는 Maven만의 기능
	프로젝트 생성 -> 사용자 정의 프로젝트
	라이브러리 설정 -> 라이브러리 관리와 의존성 체크
	배포 -> 라이브러리 저장소 활용







<------------------------------------------------------------- Maven 설치하기 ------------------------------------------------------------->
* maven.apache.org에서 다운로드 및 PATH설정
* M2_HOME이름으로 변수 설정 및 메이븐 폴더를 설정
* 이후 PATH에서 %M2_HOME%\bin으로 PATH 설정





<------------------------------------------------------------- Maven으로 자바 프로젝트 생성하기 ------------------------------------------------------------->
* Maven 폴더 생성후 콘솔창에서 명령어로 메이븐 자바 프로젝트 생성
	콘솔창에서 폴더로 이동 후 명령어 입력 mvn archetype:generate -DgroupId=com.newlecture -DartifactId=javaprj -DarchetypeArtifactId=maven-archetype-quickstart
	구분자는 -D이다.

* archetype을 generate 즉 생성해 주세요 라는 옵션
* 기존 이클립스로 만드는 프로젝트는 비어있는 프로젝트(사용자가 일일이 채워가야함)
* 메이븐 프로젝트는 자주 사용하는 부분을 프로젝트의 기본 형태로 만들어준다
* 메이븐은 내가만든 프로젝트 자체가 또 하나의 프로젝트 템플릿이 될 수 있다. 따라서 mvn archetype:generate라는 명령어(메이븐 아키텍쳐 타입을 만든다)를 내린다.
* quickstart는 기본적인 템플릿, 자바 프로젝트 타입
* 이걸 모토로 새로운 프로젝트를 만듦 이름이 javaprj이다
	1. 즉 archetypeArtifactId=maven-archetype-quickstart 다른사람이 만든 프로젝트 구조를 기본으로
	2. artifactId=javaprj 이번에는 내가 javaprj라는 새로운 프로젝트를 생성한다.
		프로젝트명 동일한것을 막기위해 그룹아이디 지정 (com.hoseok) 자기만의 도메인이름 사용 큰 범위부터 뒤집어서 사용(원래는 hoseok.com)









<------------------------------------------------------------- Maven 프로젝트 컴파일과 실행 ------------------------------------------------------------->
* 이클립스 IDE가 아닌 콘솔창으로 해보기
* Maven Prj는 ROOT에 pom.xml이 존재함 이는 프로젝트 컴파일 및 실행시 반드시 pom.xml에 있는 디렉토리에서 메이븐 관련된 명령어를 이용한다.

* 컴파일시 오류가 난다면 JDK버젼을 7이상으로 올려야함 pom.xml수정
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

* mvn compile로 컴파일
* 컴파일 뿐만아니라 패키지도 가능 mvn package --> jar파일 생성됨
* class파일이 아니라 jar파일로도 실행이 가능함
	java -cp target\javaprj-1.0-SNAPSHOT.jar com.hoseok.App








<------------------------------------------------------------- Build LifeCycle과 Phase들 ------------------------------------------------------------->
* Maven이 가지고 있는 명령어들 (이것과 관련된게 빌드 라이프사이클)
	mvn compile
	mvn test
	mvn package
	(위 3개는 수행 단계의 이름이다 --> phase)

* 메이븐은 기존에 많은 단계들을 가짐(phase) 만약 compile을 한다면 앞의 단계는 자동적으로 실행됨
	즉 명령어는 실행하기 원하는 단계까지만 실행해달라는 의미가 됨.
	예를 들어 compile은 사전에 validate - initialize - getnerate-sources - process-sources - generate-resources - process-resources 단계를 거치고 compile이 실행된다.

* 다만 패키징(jar냐 war(웹개발)이냐 에따라 단계가 비슷하지만 조금씩 다름)에 따라 다르다.
	이 패키징은 변경할 수 있다.

* 변경하는 위치는 pom.xml에 설정을 할 수 있다.

* pom의 의미? -> Project Object Model : 프로젝트를 만들게 되면 프로젝트를 구성하고 있는 내용에 관한 것을 하나의 모델로 가지고 있음
					즉 프로젝트 모델을 변경하면 프로젝트가 달라지게 된다.

* 그렇다면 단계를 수행하는것은 정적으로 정해져 있나? -> 각 단계별로 끊어놨기 때문에 각 단계가 무조건 실행되는것은 아니다.
	따라서 플러그인처럼 뺐다 꼈다 할 수 있다.
	> compile: org.apache.maven.plugins:maven-compiler-plugin:3.1:compile에서 
	  phase                       plug-in                          Goal(플러그인의 내부적으로 나뉜 단계) 이렇게 존재

* 메이븐 프로젝트를 처음 생성하면
	> 기본적으로 process-resources, compile, process-teest-resources, test-compile, test, package는 단계에 해당되는 프로그램(플러그인)이 매핑되어있다.
	> 나머지 단계는 정의는 있으나 플러그인은 연결되지 않음

* 그럼 연결할 수 있나? 있다 어디서? --> pom.xml에서 할 수 있다.

* 기존 설정도 pom.xml에서 변경할 수 있다(버전 등등)

* 실제 콘솔창에서 mvn help:describe -Dcmd=compile 입력시 단계(phase)별 플러그인이 설정되어있는지 확인 가능하다

* 그렇다면 플러그인은 어디서 구하나? 메이븐이 기본적으로 제공하는 것이나 혹은 외부에서 다운받아 사용가능하다.








<------------------------------------------------------------- Maven 프로젝트 IDE에서 로드하기 ------------------------------------------------------------->
* 메이븐은 빌드 도구 이므로 편집기능은 없다
	다양한 편집도구와 사용할 수 있다는 장점 일단 IDE가 편집도구의 역할을 해줌

* 메이븐의 빌드과정을 거치면서 이클립스 콘솔창에 이클립스 단축키를 이용해 실행 가능
* 메이븐을 사용하는 곳이면 어느곳이던 프로젝트를 옮겨서 도킹해 사용가능(IDE가 아니라 Maven에 연결되어 있기 때문이다) > 빙산의 일각!!
































