스프링의 시작이다..!!


< ------------------------------------------------------------Spring 소개와 학습 안내------------------------------------------------------------>
* Spring이 존재감을 보이게 된 이유
	1. dependency injection 기능	>> Enterprise Application 만들때 중요함
	2. transaction management 기능	>> 트랜잭션 관리를 깔끔하게 지원해준다. (단순 라이브러리 사용만으로도)

* Java EE버젼을 사용하지 않게됨
	기존 Java SE에 Java EE를 얹어서 사용했지만 이젠 Java SE + Spring으로 엮어서 사용가능하다

* 웹개발을 하겠다에 포커스를 맞추면 3가지 범주에 포커스가 맞춰짐
	
	1. MVC	---> 기존 MVC 모델방식으로 만들면 일일이 만들어야한다는 부담감 증가	---> Spring 라이브러리를 이용해 좀 더 편하게 만들기 가능
	>> Spring 제공하는 기능 ---> DI(Spring에서 MVC를 이용할때 이용됨) ---> 이걸 사용할 때 이애하기위해 느슨한 결합력과 인터페이스의 의미를 알아야함

	2. 트랜잭션	--->	DAO, Service계층을 나눠 프로그램을 만들경우 그들간 함수호출 관계에서 단일 트랜잭션 만들기 어려웠음 ----> 그것을 가능케하기위해 스프링에서 제공하는 트랜잭션 처리방법 공부함
	>> Spring ---> AOP(Spring에서 트랜잭션 처리시 이용됨)

	3. 인증과 권한	---> 웹사이트에서 사용자 인증과 권한
	>>>Spring ---> Spring서 인증과 권한 할 때 Servlet Filter 이용해 개발됨




< ------------------------------------------------------------느슨한 결합력과 인터페이스------------------------------------------------------------>
* 엔터프라이즈 어플리케이션을 만든다고 하면 기본적으로 사용하는 Layer
	UI 		---- 		Service 	  ---- 				DAO 									---- DB
	사용자의 비즈니스 ---- 사용자 요구에 맞는 서비스 담당 ---- 데이터 소스 접근 방법, 구현기술 숨기고 서비스 레이어에서 순수하게 자바를 이용해 데이터를 제공받을 수 있게해주는 DAO

* 서비스에서 기존 이용하던 DAO 객체가 새로운 객체로 수정되면 어떻게 수정해야 할까?
	방법1 : B1을 B2로 변경하고 Service에서 소스코드를 B1 -> B2로 변경 ---> 소스코드의 변경이 생기므로 결합력이 매우 높음
		소스코드 변경없이 변경하는 방법(결합력을 낮추는 방법)
	
	해결책 : private B1 b = new B1(); ---> private B2 b = new B2()가 아닌 인터페이스를 이용해 private B b = new B2(); <<
		인터페이스를 이용하면 그 인터페이스를 구현하고 있는 객체들을 모두 참조 가능하다.

	해결책2: 그러면 private B b = new B2()에서 new B2()는 어떻게 변경? ---> 소스코드를 수정 안하는 방식이 필요 ---> 기존 코드를 들어냄(DI)객체 생성과 조립을 위한 외부 설정 (XML, Annotation)
		자바객체지향 33강 참조해보기

* 결론
	> 기업형 어플리케이션을 만들며 어떻게 유지보수 해야할까? ---> 소스코드변경은 위험부담 증가 따라서 대치하고 추가하는 방법이 필요
	 ---> 그러기 위해서는 설정 파일이 필요하다. ---> 인터페이스를 이용해 객체를 숨길 수 있다. ---> 결합을 낮추는 방법을 스프링이 도와줄 수 있다.